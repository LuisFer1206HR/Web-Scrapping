from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.common.exceptions import TimeoutException
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import messagebox
from selenium.webdriver.common.keys import Keys
import time

# Ruta completa hacia el ChromeDriver
ruta_chromedriver = "C:/Users/lhuerta/OneDrive - Nucitec/108-Python/chromedriver.exe"

# Crear una instancia del servicio de ChromeDriver
servicio = Service(ruta_chromedriver)
driver = webdriver.Chrome(service=servicio)

try:
    # Abrir la página
    driver.get("https://ppsai-abasto.imss.gob.mx/abasto-web/login")
    print("1-Página abierta.")

    # Inicio de sesión
    web_user = driver.find_element(By.ID, 'idUsuario')
    web_user.send_keys("USERNAME")
    web_pw = driver.find_element(By.ID, 'idPassword')
    web_pw.send_keys("Password")
    web_button = driver.find_element(By.NAME, 'loginButton')
    web_button.click()
    print("2-Loging Correcto.")

    # Ir a Consultar Órdenes - Menú
    WebDriverWait(driver, 2).until(
        EC.presence_of_element_located((By.CLASS_NAME, "dropdown-toggle"))
    )
    menu_toggle = driver.find_element(By.CLASS_NAME, "dropdown-toggle")
    menu_toggle.click()
    print("3-Menú desplegado.")

    # Seleccionar la opción "Reporte de altas"
    consulta_ordenes = driver.find_element(By.LINK_TEXT, "Reporte de altas")
    consulta_ordenes.click()
    print("4-Ingreso a altas.")

    # Calcular las fechas
    fecha_ayer = (datetime.now() - timedelta(days=30)).strftime('%d/%m/%Y')
    fecha_hoy = datetime.now().strftime('%d/%m/%Y')

    # Establecer las fechas
    WebDriverWait(driver, 5).until(
        EC.presence_of_element_located((By.ID, "fechaInicioAlta"))
    )
    campo_fecha_ini_alta = driver.find_element(By.ID, 'fechaInicioAlta')
    campo_fecha_Fin_alta = driver.find_element(By.ID, 'fechaFinAlta')
    campo_fecha_ini_alta.send_keys(fecha_ayer)
    campo_fecha_Fin_alta.send_keys(fecha_hoy)
    print("5-Fechas agregadas.")

    # Simular un Enter después de agregar la fecha de hoy
    campo_fecha_Fin_alta.send_keys(Keys.ENTER)
    print("5-Fechas agregadas.")

    WebDriverWait(driver, 5).until(
        EC.element_to_be_clickable((By.CLASS_NAME, "btn-primary"))
    )
    button_Consultar_Altas = driver.find_element(By.CLASS_NAME, 'btn-primary')
    button_Consultar_Altas.click()
    print("6-Consulta realizada.")

    # Validación de modal - Sin Datos
    try:
        WebDriverWait(driver, 5).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "modal-content"))
        )   
        print("6.1.1-Modal encontrado: Sin Datos para Exportar")
        boton_aceptar_modal = WebDriverWait(driver, 2).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'btn-default') and text()='Aceptar']"))
        )
        boton_aceptar_modal.click()
        print("6.1.2-Botón 'Aceptar' en el modal clickeado.")

        # Mostrar una ventana emergente con el mensaje
        root = tk.Tk()
        root.withdraw()
        messagebox.showinfo("6.1.4-Mensaje", "Sin Datos para exportar en Ordenes")
        root.destroy()
        # Salir del script
        driver.quit()
        sys.exit("Terminado: Sin Datos para Exportar")

    except TimeoutException:
        print("6.1.5-Modal no encontrado.")

    # Verificación de tabla
    try:
        WebDriverWait(driver, 5).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "fontSizeTable"))
        )
        print("7-Tabla Visible.")
    except TimeoutException:
        button_Consultar_Altas_Dos = driver.find_element(By.CLASS_NAME, 'btn-primary')
        button_Consultar_Altas_Dos.click()
        print("6.2-Consulta realizada2.")

    # Validación de modal - Con Datos
    try:
        WebDriverWait(driver, 5).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "modal-content"))
        )
        print("6.2.1-Modal encontrado: Sin Datos para Exportar")
        boton_aceptar_modal = WebDriverWait(driver, 2).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'btn-default') and text()='Aceptar']"))
        )
        boton_aceptar_modal.click()
        print("6.2.2-Botón 'Aceptar' en el modal clickeado.")
        
        # Mostrar una ventana emergente con el mensaje
        root = tk.Tk()
        root.withdraw()
        messagebox.showinfo("6.2.4-Mensaje", "Sin Datos para exportar en Ordenes")
        root.destroy()
        # Salir del script
        driver.quit()
        sys.exit("Terminado: Sin Datos para Exportar")

    except TimeoutException:
        print("8-Modal no encontrado: Con datos a Exportar.")

    # Esperar y hacer clic en el botón "Exportar"
    try:
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'btn-default') and contains(., 'Exportar')]"))
        )
        button_Exportar = driver.find_element(By.XPATH, "//button[contains(@class, 'btn-default') and contains(., 'Exportar')]")
        button_Exportar.click()
        print("9-Botón de Exportar encontrado y Data Descargada.")
    except TimeoutException:
        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'btn-default') and contains(., 'Exportar')]"))
        )
        button_ExportarDos = driver.find_element(By.XPATH, "//button[contains(@class, 'btn-default') and contains(., 'Exportar')]")
        button_ExportarDos.click()
        print("9.1-Botón de Exportar alternativo encontrado y Data Descargada.")

    time.sleep(20)

finally:
    # Cerrar el navegador al finalizar
    print("10-Explorador cerrado")
    driver.quit()


import shutil
import os
import glob

ruta_descargas = "C:/Users/lhuerta/Downloads"  # Carpeta donde se descarga el archivo
ruta_onedrive = "C:/Users/lhuerta/OneDrive - Nucitec/Altas"  # Ruta a la carpeta de OneDrive


try:
    # (Tu código para automatización con Selenium va aquí)
    # ...

    time.sleep(20)  # Esperar a que la descarga termine

    # Identificar el archivo más reciente en la carpeta de descargas
    list_of_files = glob.glob(os.path.join(ruta_descargas, '*'))  # Obtiene la lista de archivos en la carpeta de descargas
    archivo_mas_reciente = max(list_of_files, key=os.path.getctime)  # Identifica el archivo más reciente
    
    # Mover el archivo más reciente a la carpeta de OneDrive
    destino = os.path.join(ruta_onedrive, os.path.basename(archivo_mas_reciente))
    
    if os.path.exists(archivo_mas_reciente):
        shutil.move(archivo_mas_reciente, destino)
        print(f"Archivo {os.path.basename(archivo_mas_reciente)} movido a {destino} exitosamente.")
    else:
        print("El archivo descargado no se encontró.")
    
finally:
    print("10-Explorador cerrado")
    driver.quit()
